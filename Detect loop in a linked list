/*
Floyd’s Cycle-Finding Algorithm: This is the fastest method and has been described below:

Traverse linked list using two pointers. 
Move one pointer(slow_p) by one and another pointer(fast_p) by two. 
If these pointers meet at the same node then there is a loop. If pointers do not meet then linked list doesn’t have a loop
*/
#include <bits/stdc++.h>
using namespace std;
class Node{
    public:
    int data;
    Node* next;
};

int detectLoopInaLinkedList(Node* list)
{
    Node* slow_ptr=list;
    Node* fast_ptr=list;
    while(slow_ptr!=NULL && fast_ptr!=NULL && fast_ptr->next!=NULL)
    {
        slow_ptr=slow_ptr->next;
        fast_ptr=fast_ptr->next->next;
        if(slow_ptr==fast_ptr)
        {
            cout<<"Found loop";
            return 1;
        }
    }
    return 0;
}
void push( Node **head_ref,int key)
{
/* allocate node */
     Node* newNode=new Node();
      /* put in the data */
    newNode->data=key;
    /* link the old list off the new node */
    newNode->next=(*head_ref);
    /* move the head to point to the new node */
    (*head_ref)=newNode;
}
int main()
{
     Node *head=NULL;
    /* Use push() to construct below list  
    1->2->1->3->1 */
    push(&head, 1); 
    push(&head, 4); 
    push(&head, 6); 
    push(&head, 9); 
    head->next->next->next->next=head; 
  
    /* Check the count function */
    cout << detectLoopInaLinkedList(head); 
    return 0; 

    
}
