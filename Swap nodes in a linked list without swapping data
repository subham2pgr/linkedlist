/*
Given a linked list and two keys in it, swap nodes for two given keys. Nodes should be swapped by changing links. Swapping data of nodes may be expensive in many situations when data contains many fields.
It may be assumed that all keys in linked list are distinct.

Examples:

Input:  10->15->12->13->20->14,  x = 12, y = 20
Output: 10->15->20->13->12->14

Input:  10->15->12->13->20->14,  x = 10, y = 20
Output: 20->15->12->13->10->14

Input:  10->15->12->13->20->14,  x = 12, y = 13
Output: 10->15->13->12->20->14

This may look a simple problem, but is interesting question as it has following cases to be handled.
1) x and y may or may not be adjacent.
2) Either x or y may be a head node.
3) Either x or y may be last node.
4) x and/or y may not be present in linked list.

How to write a clean working code that handles all of the above possibilities.

We strongly recommend to minimize your browser and try this yourself first.

The idea it to first search x and y in given linked list. If any of them is not present, then return. While searching for x and y, keep track of current and previous pointers. First change next of previous pointers, then change next of current pointers. 
*/
#include <bits/stdc++.h>

using namespace std;
struct Node
{
    int data;
    struct Node* next;
};
struct Node* newNode(int key)
{
    struct Node* temp=(struct Node*)malloc(sizeof(struct Node));
    temp->data=key;
    temp->next=NULL;
    return temp;
}
void swapNodes(struct Node* head,int x,int y)
{
    struct Node* prevX=NULL;
    struct Node* prevY=NULL;
    struct Node* currX=head;
    struct Node* currY=head;
    // Nothing to do if x and y are same  
    if(x==y)
    return;
    // Search for x (keep track of prevX and CurrX 
    while(currX && currX->data!=x)
    {
        prevX=currX;
        currX=currX->next;
    }
    // Search for y (keep track of prevY and CurrY  
    while(currY && currY->data!=y)
    {
        prevY=currY;
        currY=currY->next;
    }
    // If either x or y is not present, nothing to do 
    if(currX==NULL || currY==NULL)
      return;
      // If x is not head of linked list 
      if(prevX!=NULL)
      {
          prevX->next=currY;
      }
      else // Else make y as new head
      {
          head=currY;
      }
      // If y is not head of linked list 
      if(prevY!=NULL)
      {
          prevY->next=currX;
      }
      else / Else make x as new head 
      {
          head=currX;
      }
      // Swap next pointers  
      struct Node* temp=currX->next;
      currX->next=currY->next;
      currY->next=temp;
    
}
void printList(struct Node* n)
{
    while(n!=NULL)
    {
        cout<<n->data<<" ";
        n=n->next;
    }
}
int main()
{
    struct Node *start = newNode(1); 
    start->next = newNode(2); 
    start->next->next = newNode(3); 
    start->next->next->next = newNode(4); 
    start->next->next->next->next = newNode(5); 
    start->next->next->next->next->next = 
                                    newNode(6); 
    start->next->next->next->next->next->next = 
                                    newNode(7); 
  
    cout << "Linked list before calling swapNodes() ";  
    printList(start);  
  
    swapNodes(start, 4, 3);  
  
    cout << "\nLinked list after calling swapNodes() ";  
    printList(start);  
  
    return 0;  
   
}
/*
Output:
 Linked list before calling swapNodes() 1 2 3 4 5 6 7
 Linked list after calling swapNodes() 1 2 4 3 5 6 7
 */
