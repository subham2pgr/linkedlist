/*
METHOD 3 (Use Hashing)
We traverse the link list from head to end. For every newly encountered element, we check whether it is in the hash table: if yes, we remove it; otherwise we put it in the hash table
*/
#include <bits/stdc++.h>

using namespace std;
struct Node
{
    int data;
    struct Node* next;
};
struct Node* newNode(int key)
{
    struct Node* temp=(struct Node*)malloc(sizeof(struct Node));
    temp->data=key;
    temp->next=NULL;
    return temp;
}
void removeDuplicatesFromUnsortedList(struct Node *start)
{
    unordered_set<int> seen;
    struct Node* prev=NULL;
    struct Node* curr=start;
    while(curr!=NULL)
    {
    // If current value is seen before
        if(seen.find(curr->data)!=seen.end())
        {
            prev->next=curr->next;
            delete(curr);
        }
        else
        {
            seen.insert(curr->data);
            prev=curr;
            
        }
        curr=prev->next;
    }
}
void printList(struct Node* n)
{
    while(n!=NULL)
    {
        cout<<n->data<<" ";
        n=n->next;
    }
}
int main()
{
    struct Node *start = newNode(10); 
    start->next = newNode(12); 
    start->next->next = newNode(11); 
    start->next->next->next = newNode(11); 
    start->next->next->next->next = newNode(12); 
    start->next->next->next->next->next = 
                                    newNode(11); 
    start->next->next->next->next->next->next = 
                                    newNode(10); 
  
    printf("Linked list before removing duplicates : \n"); 
    printList(start); 
  
    removeDuplicatesFromUnsortedList(start); 
  
    printf("\nLinked list after removing duplicates : \n"); 
    printList(start); 
  
    return 0; 
}
/*
Output :
Linked list before removing duplicates:
 10 12 11 11 12 11 10 
Linked list after removing duplicates:
 10 12 11 
Thanks to bearwang for suggesting this method.

Time Complexity: O(n) on average (assuming that hash table access time is O(1) on average).
*/
