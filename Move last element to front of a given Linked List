
/*
Write a function that moves the last element to the front in a given Singly Linked List. For example, if the given Linked List is 1->2->3->4->5, then the function should change the list to 5->1->2->3->4.

Traverse the list till last node. Use two pointers: one to store the address of last node and other for address of second last node. After the end of loop do following operations.
i) Make second last as last (secLast->next = NULL).
ii) Set next of last as head (last->next = *head_ref).
iii) Make last as head ( *head_ref = last)
*/
#include <bits/stdc++.h>

using namespace std;
struct Node
{
    int data;
    struct Node* next;
};
struct Node* newNode(int key)
{
    struct Node* temp=(struct Node*)malloc(sizeof(struct Node));
    temp->data=key;
    temp->next=NULL;
    return temp;
}
void moveLastNodeToFirst(struct Node** head)
{
/* If linked list is empty, or  
    it contains only one node,  
    then nothing needs to be done, 
    simply return */
    if(*head==NULL || (*head)->next==NULL)
    return;
     /* Initialize second last 
    and last pointers */
    
   struct Node* sec_Last=NULL; 
   struct Node* curr=*head;
   /*After this loop secLast contains 
    address of second last node and  
    last contains address of last node in Linked List */
   while(curr->next!=NULL)
   {
       sec_Last=curr;
       curr=curr->next;
   }
   /* Set the next of second last as NULL */
   sec_Last->next=NULL;
   /* Set next of last as head node */
   curr->next=*head;
   /* Change the head pointer 
    to point to last node now */
   *head=curr;
    
}

void printList(struct Node* n)
{
    while(n!=NULL)
    {
        cout<<n->data<<" ";
        n=n->next;
    }
}
int main()
{
    struct Node *start = newNode(1); 
    start->next = newNode(2); 
    start->next->next = newNode(3); 
    start->next->next->next = newNode(4); 
    start->next->next->next->next = newNode(5); 
    
  
    cout << "Linked list before calling moveLastNodeToFirst()";  
    printList(start);  
  
    moveLastNodeToFirst(&start);  
  
    cout << "\nLinked list after calling moveLastNodeToFirst()";  
    printList(start);  
  
    return 0;  
   
}
/*
Linked list before moving last to front 
1 2 3 4 5 
 Linked list after removing last to front 
5 1 2 3 4
Time Complexity: O(n) where n is the number of nodes in the given Linked List.
*/
