#include<iostream>
using namespace std;
struct Node
{
    int data;
    struct Node* next;
};
struct Node *newNode(int data)  
{  
    struct Node *new_node = (struct Node*)malloc(sizeof(struct Node)); 
    new_node->data = data;  
    new_node->next = NULL;  
    return new_node;  
} 
void push(Node** head_ref, int new_data)  
{  
    /* allocate node */
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));  
    new_node->data=new_data;
    /* link the old list off the new node */
    new_node->next = (*head_ref);  
  
    /* move the head to point to the new node */
    (*head_ref) = new_node;  
}  
struct Node* addTwoLists(struct Node* first,struct Node* second)
{
    struct Node* temp=NULL;
    struct Node* prev=NULL;
    struct Node* res=NULL;
    int sum=0;
    int carry=0;
     while (first != NULL || second != NULL){
    sum=carry+(first?first->data:0)+(second?second->data:0);
    carry=(sum>=10)?1:0;
    sum=sum%10;
    temp=newNode(sum);
    if(res==NULL)
       res=temp;
    else
       prev->next=temp;
       
    prev=temp;
    if(first)
    first=first->next;
    if(second)
    second=second->next;
     }
    
    if(carry>0)
    temp->next=newNode(carry);
    
    return res;
    
    
}
void printList(Node *node)  
{  
    while(node != NULL)  
    {  
        cout << node->data << " ";  
        node = node->next;  
    }  
    cout<<endl;  
}  
  
/* Driver code */
int main()  
{  
    Node* res = NULL;  
    Node* first = NULL;  
    Node* second = NULL;  
  
    // create first list 7->5->9->4->6  
    push(&first, 6);  
    push(&first, 4);  
    push(&first, 9);  
    push(&first, 5);  
    push(&first, 7);  
    cout<<"First list is"; 
    printList(first);  
  
    // create second list 8->4  
    push(&second, 4);  
    push(&second, 8);  
    cout<<"Second List is ";  
    printList(second);  
  
    // Add the two lists and see result  
    res = addTwoLists(first, second);  
    cout<<"Resultant list is ";  
    printList(res);  
  
return 0;  
}
